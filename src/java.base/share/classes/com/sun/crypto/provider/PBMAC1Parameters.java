/*
 * Copyright (c) 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.sun.crypto.provider;

import java.io.IOException;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidParameterSpecException;
import javax.crypto.spec.PBEParameterSpec;

import sun.security.util.*;

/**
 * This class implements the parameter set used with password-based
 * mac scheme 1 (PBMAC1), which is defined in PKCS#5 as follows:
 *
 * <pre>
 * -- PBMAC1
 *
 * PBMAC1Algorithms ALGORITHM-IDENTIFIER ::=
 *   { {PBMAC1-params IDENTIFIED BY id-PBMAC1}, ...}
 *
 * id-PBMAC1 OBJECT IDENTIFIER ::= {pkcs-5 14}
 *
 * PBMAC1-params ::= SEQUENCE {
 *   keyDerivationFunc AlgorithmIdentifier {{PBMAC1-KDFs}},
 *   messageAuthScheme AlgorithmIdentifier {{PBMAC1-MACs}} }
 *
 * PBMAC1-KDFs ALGORITHM-IDENTIFIER ::=
 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
 *
 * PBMAC1-MACs ALGORITHM-IDENTIFIER ::= { ... }
 *
 * -- PBKDF2
 *
 * {@link PBKDF2Parameters}
 *
 * </pre>
 *
 * @since 26
 */
final public class PBMAC1Parameters {

    private byte[] salt = null;

    // Iteration count
    private int iCount = 0;

    private String prfAlgo;
    private String hmacAlgo;

    // the key derivation function (default is HmacSHA1)
    private final ObjectIdentifier kdfAlgo_OID =
            ObjectIdentifier.of(KnownOIDs.HmacSHA1);

    // length of key generated by the kdf
    private int keyLength = -1;

    protected void Init(AlgorithmParameterSpec paramSpec)
            throws InvalidParameterSpecException {
        if (!(paramSpec instanceof PBEParameterSpec pbeParamSpec)) {
            throw new InvalidParameterSpecException
                    ("Inappropriate parameter specification");
        }
        salt = pbeParamSpec.getSalt().clone();
        iCount = pbeParamSpec.getIterationCount();
    }

    public void Init(byte[] encoded) throws IOException {
        DerValue pBMAC1_params = new DerValue(encoded);
        if (pBMAC1_params.tag != DerValue.tag_Sequence) {
            throw new IOException("PBMAC1 parameter parsing error: "
                    + "not an ASN.1 SEQUENCE tag");
        }
        DerValue[] Info = (new DerInputStream(pBMAC1_params.toByteArray()))
                .getSequence(2);
        if (Info.length != 2) {
            throw new IOException("PBMAC1 parameter parsing error: "
                + "expected length not 2");
        }
        ObjectIdentifier OID = Info[1].data.getOID();
        KnownOIDs o = KnownOIDs.findMatch(OID.toString());
        if (o == null || (!o.stdName().equals("HmacSHA1") &&
                !o.stdName().equals("HmacSHA224") &&
                !o.stdName().equals("HmacSHA256") &&
                !o.stdName().equals("HmacSHA384") &&
                !o.stdName().equals("HmacSHA512") &&
                !o.stdName().equals("HmacSHA512/224") &&
                !o.stdName().equals("HmacSHA512/256"))) {
            throw new IOException("PBMAC1 parameter parsing error: "
                    + "expecting the object identifier for a HmacSHA key "
                    + "derivation function");
        }
        // Hmac function used to compute the MAC
        this.hmacAlgo = o.stdName();

        DerValue kdf = pBMAC1_params.data.getDerValue();
        var kdfParams = new PBKDF2Parameters(kdf);
        this.prfAlgo = kdfParams.getPrfAlgo();
        this.salt = kdfParams.getSalt();
        this.iCount = kdfParams.getIterationCount();

        // Key length must be present even though it is not used.
        keyLength = kdfParams.getKeyLength();
        if (keyLength == -1) {
            throw new IOException("PBMAC1 parameter parsing "
                    + "error: missing keyLength field");
        }
    }

    protected void Init(byte[] encoded, String decodingMethod)
            throws IOException {
        Init(encoded);
    }

    protected byte[] getEncoded() throws IOException {
        DerOutputStream out = new DerOutputStream();

        DerOutputStream pBMAC1_params = new DerOutputStream();

        DerOutputStream keyDerivationFunc = new DerOutputStream();
        keyDerivationFunc.putOID(
                sun.security.util.PBKDF2Parameters.pkcs5PBKDF2_OID);

        DerOutputStream pBKDF2_params = new DerOutputStream();
        pBKDF2_params.putOctetString(salt); // choice: 'specified OCTET STRING'
        pBKDF2_params.putInteger(iCount);

        if (keyLength > 0) {
            pBKDF2_params.putInteger(keyLength / 8); // derived key length (in octets)
        }

        DerOutputStream prf = new DerOutputStream();
        // algorithm is id-hmacWith<MD>
        prf.putOID(kdfAlgo_OID);
        // parameters is 'NULL'
        prf.putNull();
        pBKDF2_params.write(DerValue.tag_Sequence, prf);

        keyDerivationFunc.write(DerValue.tag_Sequence, pBKDF2_params);
        pBMAC1_params.write(DerValue.tag_Sequence, keyDerivationFunc);

        out.write(DerValue.tag_Sequence, pBMAC1_params);

        return out.toByteArray();
    }

    protected byte[] getEncoded(String encodingMethod) throws IOException {
        return getEncoded();
    }

    public String getPrf() {
        return this.prfAlgo;
    }
    public String getHmac() {
        return this.hmacAlgo;
    }
    public byte[] getSalt() {
        return this.salt;
    }
    public int getIterations() {
        return this.iCount;
    }
}
